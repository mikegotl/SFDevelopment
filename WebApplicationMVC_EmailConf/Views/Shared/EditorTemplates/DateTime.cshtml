@using WebApplicationMVC_EmailConf.Utility
@model DateTime?
@{
    DateTime dt;
    if (Model.HasValue)
    {
        dt = (DateTime)Model;
    }
    else
    {
        dt = (DateTime)DateTime.Now;
    }

    if (ViewBag.Format != null)
    {

        //DAYS

        List<SelectListItem> days = new List<SelectListItem>();
        for (int i = 1; i <= 31; i++)
        {
            days.Add(new SelectListItem() { Text = i.ToString(), Value = i.ToString(), Selected = (i == dt.Day ? true : false) });
        }

        //MONTHS

        List<SelectListItem> months = new List<SelectListItem>();
        for (int i = 1; i <= 12; i++)
        {
            months.Add(new SelectListItem() { Text = i.ToString(), Value = i.ToString(), Selected = (i == dt.Month ? true : false) });
        }

        //YEARS

        List<SelectListItem> years = new List<SelectListItem>();

        int prevYearCount = ViewBag.PreviousYearCount;
        int nextYearCount = ViewBag.NextYearCount;

        for (int i = DateTime.Now.Year - prevYearCount; i <= DateTime.Now.Year - nextYearCount; i++)
        {
            years.Add(new SelectListItem() { Text = i.ToString(), Value = i.ToString(), Selected = (i == dt.Year ? true : false) });
        }

        //HTML
        string _format = "";
        if (ViewBag.Format != null)
        {
            _format = ViewBag.Format;
        }

        switch (_format)
        {
            case "MY":
                <div class="form-group@(Html.ValidationErrorFor(m => m, " error has-error"))">
                    <div class="col-md-12">
                        <div class="col-md-6">
                            @Html.Label("Month")
                            @Html.DropDownList("months", months, new { @class = "form-control" })
                        </div>
                        <div class="col-md-6">
                            @Html.Label("Year")
                            @Html.DropDownList("years", years, new { @class = "form-control" })
                        </div>

                        @Html.ValidationMessageFor(m => m, null, new { @class = "help-block" })
                    </div>
                </div>
                break;
            case "MD":
                <div class="form-group@(Html.ValidationErrorFor(m => m, " error has-error"))">
                    <div class="col-md-12">
                        <div class="col-md-6">
                            @Html.Label("Month")
                            @Html.DropDownList("months", months, new { @class = "form-control" })
                        </div>
                        <div class="col-md-6">
                            @Html.Label("Day")<br />
                            @Html.DropDownList("days", days, new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(m => m, null, new { @class = "help-block" })
                    </div>
                </div>

                break;
            case "M":
                <div class="form-group@(Html.ValidationErrorFor(m => m, " error has-error"))">
                    <div class="col-md-12">
                        <div class="col-md-12">
                            @Html.Label("Month")
                            @Html.DropDownList("months", months, new { @class = "form-control" })
                        </div>

                        @Html.ValidationMessageFor(m => m, null, new { @class = "help-block" })
                    </div>
                </div>
                break;
            case "D":
                <div class="form-group@(Html.ValidationErrorFor(m => m, " error has-error"))">
                    <div class="col-md-12">

                        <div class="col-md-12">
                            @Html.Label("Day")<br />
                            @Html.DropDownList("days", days, new { @class = "form-control" })
                        </div>

                        @Html.ValidationMessageFor(m => m, null, new { @class = "help-block" })
                    </div>
                </div>
                break;
            case "Y":
                <div class="form-group@(Html.ValidationErrorFor(m => m, " error has-error"))">
                    <div class="col-md-12">
                        <div class="col-md-12">
                            @Html.Label("Year")
                            @Html.DropDownList("years", years, new { @class = "form-control" })
                        </div>

                        @Html.ValidationMessageFor(m => m, null, new { @class = "help-block" })
                    </div>
                </div>

                break;
            default:
                <div class="form-group@(Html.ValidationErrorFor(m => m, " error has-error"))">
                    <div class="col-md-12">
                        <div class="col-md-4">
                            @Html.Label("Month")
                            @Html.DropDownList("months", months, new { @class = "form-control" })
                        </div>
                        <div class="col-md-4">
                            @Html.Label("Day")<br />
                            @Html.DropDownList("days", days, new { @class = "form-control" })
                        </div>
                        <div class="col-md-4">
                            @Html.Label("Year")
                            @Html.DropDownList("years", years, new { @class = "form-control" })
                        </div>

                        @Html.ValidationMessageFor(m => m, null, new { @class = "help-block" })
                    </div>
                </div>

                break;
        }

    }
    else
    {
        <div class="form-group@(Html.ValidationErrorFor(m => m, " error has-error"))">
            @Html.TextBoxFor(m => m, new { @class = "form-control datepicker", data_provide = "datepicker", data_date_language = "globalize", data_date = dt, data_date_format = System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat.ShortDatePattern.Replace("M", "m"), data_date_today_highlight = "true", data_date_today_btn = "false" })
            @Html.ValidationMessageFor(m => m, null, new { @class = "help-block" })
        </div>
    }
}